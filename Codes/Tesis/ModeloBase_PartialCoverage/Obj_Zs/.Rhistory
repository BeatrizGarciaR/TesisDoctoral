################################
write(len_I, file = instancename)
write(len_L, file = instancename, append=TRUE)
len_S = tamanos_S[sconj]
write(len_S, file = instancename, append=TRUE)
###############################
########## DEMANDA ###########
##############################
# Demanda solo para una muestra
# Demand <- matrix(nrow=1, ncol=len_I)
# rand = rnorm(1, mean = 0.5, sd = 0.2)
# this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
# totalAccidentes = 0
# for (len in 1:len_I){
#   Demand[len] = as.integer(this[len]*500)
#   totalAccidentes = totalAccidentes + as.integer(this[len]*500)
# }
# for (len in 1:len_I){
#   if (Demand[len] == 0){
#     Demand[len] = 1
#   }
# }
#Demanda para vaias muestras (s muestras) de cada i
Demand <- matrix(nrow=len_S, ncol=len_I)
totalAccidentes = 0
for (s in 1:len_S){
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
for (len in 1:len_I){
if(is.na(this) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
}
else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
}
}
for (len in 1:len_I){
if (Demand[s,len] == 0){
Demand[s,len] = 1
}
}
}
write.table(Demand, file = instancename, row.names = FALSE, col.names = FALSE, append=TRUE)
# ###### NORMALIZADO
# xs <- rexp(len_S*len_I*length(K), rate = 1)
# S <- matrix(nrow=len_S, ncol=len_I*length(K))
# sig <- 0
# for (len in 1:(len_I*length(K))){
#   rand = rnorm(1)
#   if (rand < 1){
#     for (s in 1:len_S){
#       S[s, len] = 0
#     }
#   }
#   else{
#     for (s in 1:len_S){
#       sig <- sig + 1
#       if (xs[sig] < 1){
#         S[s, len] = 0
#       }
#       else if (xs[sig] < 2){
#         S[s, len] = 1
#       }
#       else{
#         S[s, len] = 2
#       }
#     }
#   }
# }
#
#
# ###### NO NORMALIZADO
# # xs <- rexp(len_S*len_I*length(K), rate = 2)
# # #xs <- rbinom(len_S*len_I*length(K), 1, 0.5)
# # S <- matrix(nrow=len_S, ncol=len_I*length(K))
# # sig <- 0
# # for (s in 1:len_S){
# #   rand = rnorm(1)
# #   if (rand < 1){
# #     for (len in 1:(len_I*length(K))){
# #       S[s, len] = 0
# #     }
# #   }
# #   else{
# #     for (len in 1:(len_I*length(K))){
# #       #x <- rexp(1, rate = 2)
# #       #if (len < len_I*length(K)/3 || len > len_I*length(K) - len_I*length(K)/3){
# #       randi = rnorm(1)
# #       if (randi < 0.8){
# #         S[s, len] = 0
# #       }
# #       else{
# #         sig = sig + 1
# #         x = xs[sig]
# #         # if (x == 0){
# #         #   S[s, len] = 1
# #         # }
# #         # else{
# #         #   S[s, len] = 2
# #         # }
# #         if (x < 0.5){
# #           S[s, len] = 0
# #         }
# #         else if (x < 2){
# #           S[s, len] = 1
# #         }
# #         else{
# #           S[s, len] = 2
# #         }
# #       }
# #
# #     }
# #   }
# # }
#
# # S <- c()
# # for (s in 1:len_S){
# #   S <- rbind(S, rbinom(len_I*length(K), 2, 0.1))
# # }
# write.table(S, file = instancename, row.names = FALSE, col.names = FALSE, append=TRUE)
#
################################
########## SCENARIOS ###########
################################
#S <- matrix(nrow=len_S, ncol=len_I*length(K))
proporcion_i <- c()
sumatotal = 0
for (i in 1:len_I){
Demand_i = sum(Demand[,i])
proporcion_i <- cbind(proporcion_i, Demand_i/totalAccidentes)
sumatotal = sumatotal + Demand_i/totalAccidentes
}
S <- matrix(nrow=len_S, ncol=len_I*length(K))
for (s in 1:len_S){
count = 1
for (i in 1:len_I){
Demand_i = sample(Demand[,i], 1)
aux <- sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
S[s,count] = as.integer((2*aux)/3)
count = count + 1
S[s,count] = as.integer(aux/3)
count = count + 1
}
}
#S <- sample(Demand, size=length(Demand), replace=TRUE, prob=proporcion_i)
# S <- matrix(nrow=len_S, ncol=len_I*length(K))
# for (s in 1:len_S){
#   len = 0
#   for (i in 1:len_I){
#     totalaccidentes = sample(Demand[i], 1)
#     rand = rnorm(1)
#     if (rand < 0){
#       rand = rand*(-1)
#     }
#     if (rand > 1){
#       rand = 1
#     }
#     if (rand < 0.7){
#       accidentes1 = as.numeric(as.integer(totalaccidentes*(rand)))
#       len = len + 1
#       S[s, len] = accidentes1
#       len = len + 1
#       S[s, len] = as.numeric(as.integer((totalaccidentes-accidentes1)*(rand)))
#
#     }
#     else{
#       accidentes1 = totalaccidentes*(1-rand)
#       len = len + 1
#       S[s, len] = as.numeric(as.integer(accidentes1))
#       len = len + 1
#       S[s, len] = as.numeric(as.integer((totalaccidentes-accidentes1)*(1-rand)))
#
#     }
#   }
# }
write.table(S, file = instancename, row.names = FALSE, col.names = FALSE, append=TRUE)
################################
####### RESPONSE TIMES #########
################################
write.table(r_li, file = instancename, row.names = FALSE, col.names = FALSE, append=TRUE)
################################
############ C_li ##############
################################
c_li <- c()
for (l in 1:len_L){
c_li_aux <- c()
for (i in 1:len_I){
if (r_li[l,i] <= t){
c_li_aux <- cbind(c_li_aux, 1)
}
else {
if (t < r_li[l,i] &&  r_li[l,i] < tmax){
d_rli = 1 - ((r_li[l,i]-t)/(tmax-t))
c_li_aux <- cbind(c_li_aux, d_rli)
}
else{
c_li_aux <- cbind(c_li_aux, 0)
}
}
}
c_li <- rbind(c_li, c_li_aux)
}
write.table(c_li, file = instancename, row.names = FALSE, col.names = FALSE, append=TRUE)
cantMaxAmbulancias <- c(as.integer(runif(len_L, 1, 5)))
write.table(cantMaxAmbulancias, file = instancename, row.names = FALSE, col.names = FALSE, append=TRUE)
}
#S <- matrix(nrow=len_S, ncol=len_I*length(K))
proporcion_i <- c()
sumatotal = 0
for (i in 1:len_I){
Demand_i = sum(Demand[,i])
proporcion_i <- cbind(proporcion_i, Demand_i/totalAccidentes)
sumatotal = sumatotal + Demand_i/totalAccidentes
}
S <- matrix(nrow=len_S, ncol=len_I*length(K))
for (s in 1:len_S){
count = 1
for (i in 1:len_I){
Demand_i = sample(Demand[,i], 1)
aux <- sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
S[s,count] = as.integer((2*aux)/3)
count = count + 1
S[s,count] = as.integer(aux/3)
count = count + 1
}
}
#Demanda para vaias muestras (s muestras) de cada i
Demand <- matrix(nrow=len_S, ncol=len_I)
totalAccidentes = 0
for (s in 1:len_S){
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
for (len in 1:len_I){
if(is.na(this) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
}
else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
}
}
for (len in 1:len_I){
if (Demand[s,len] == 0){
Demand[s,len] = 1
}
}
}
#Demanda para vaias muestras (s muestras) de cada i
Demand <- matrix(nrow=len_S, ncol=len_I)
totalAccidentes = 0
s= 1
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
for (len in 1:len_I){
if(is.na(this) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
}
else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
}
}
this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
print(this)
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
#Demanda para vaias muestras (s muestras) de cada i
Demand <- matrix(nrow=len_S, ncol=len_I)
totalAccidentes = 0
s=1
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 0:len_I, size = len_I, prob = rand)
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 1:len_I, size = len_I, prob = rand)
for (len in 1:len_I){
if(is.na(this) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
}
else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
}
}
for (len in 1:len_I){
#if(is.na(this) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
#}
#else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
#}
}
View(Demand)
print(this)
this <- dbinom(x = 1:len_I, size = len_I, prob = 0.5)
print(this)
this <- binom(x = 1:len_I, size = len_I, prob = 0.5)
this <- rbinom(x = 1:len_I, size = len_I, prob = 0.5)
this <- dbinom(x = 1:len_I, size = len_I, prob = 0.5)
this <- rbinom(x = 1:len_I, size = len_I, prob = 0.5)
this <- rbinom(10, size = len_I, prob = 0.5)
this <- pbinom(x = 1:len_I, size = len_I, prob = 0.5)
this <- dbinom(x = 1:len_I, size = len_I, prob = 0.5)
print(this)
this <- rbinom(x = 1:len_I, size = len_I, prob = 0.5)
this <- rbinom(len_I, size = len_I, prob = 0.5)
print(this)
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
#Demanda para vaias muestras (s muestras) de cada i
Demand <- matrix(nrow=len_S, ncol=len_I)
totalAccidentes = 0
for (s in 1:len_S){
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 1:len_I, size = len_I, prob = rand)
#this <- rbinom(len_I, size = len_I, prob = 0.5)
for (len in 1:len_I){
if(is.na(this) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
}
else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
}
}
for (len in 1:len_I){
if (Demand[s,len] == 0){
Demand[s,len] = 1
}
}
}
#Demanda para vaias muestras (s muestras) de cada i
Demand <- matrix(nrow=len_S, ncol=len_I)
totalAccidentes = 0
for (s in 1:len_S){
rand = rnorm(1, mean = 0.5, sd = 0.2)
this <- dbinom(x = 1:len_I, size = len_I, prob = rand)
#this <- rbinom(len_I, size = len_I, prob = 0.5)
for (len in 1:len_I){
if(is.na(this[len]) == TRUE){
Demand[s,len] = 1
totalAccidentes = totalAccidentes + 1
}
else{
Demand[s,len] = as.integer(this[len]*500)
totalAccidentes = totalAccidentes + as.integer(this[len]*500)
}
}
for (len in 1:len_I){
if (Demand[s,len] == 0){
Demand[s,len] = 1
}
}
}
View(Demand)
#S <- matrix(nrow=len_S, ncol=len_I*length(K))
proporcion_i <- c()
sumatotal = 0
for (i in 1:len_I){
Demand_i = sum(Demand[,i])
proporcion_i <- cbind(proporcion_i, Demand_i/totalAccidentes)
sumatotal = sumatotal + Demand_i/totalAccidentes
}
View(proporcion_i)
S <- matrix(nrow=len_S, ncol=len_I*length(K))
for (s in 1:len_S){
count = 1
for (i in 1:len_I){
Demand_i = sample(Demand[,i], 1)
aux <- sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
S[s,count] = as.integer((2*aux)/3)
count = count + 1
S[s,count] = as.integer(aux/3)
count = count + 1
}
}
sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
View(S)
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
S <- matrix(nrow=len_S, ncol=len_I*length(K))
i=1
sample(Demand[,i], 1)
sample(Demand[,i], 1)
sample(Demand[,i], 1)
sample(Demand[,i], 1)
Demand[,i]
Demand[,i]
Demand[,2]
Demand[,3]
Demand[,4]
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
View(Demand)
S <- matrix(nrow=len_S, ncol=len_I*length(K))
for (s in 1:len_S){
count = 1
for (i in 1:len_I){
print(Demand[,i])
Demand_i = sample(Demand[,i], 1)
aux <- sample(1:Demand_i, 1, prob=rexp(1:Demand_i, proporcion_i[i]))
print(aux)
S[s,count] = as.integer((2*aux)/3)
count = count + 1
S[s,count] = as.integer(aux/3)
count = count + 1
}
}
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
View(S)
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
View(S)
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
View(Demand)
dbinom(x = 1:len_I, size = len_I, prob = -0.002)
dbinom(x = 1:len_I, size = len_I, prob = -0.1)
rnorm(1, mean = 0.5, sd = 0.2)
rnorm(1, mean = 0.5, sd = 0.2)
rnorm(1, mean = 0.5, sd = 0.2)
rnorm(1, mean = 0.5, sd = 0.2)
rnorm(1000, mean = 0.5, sd = 0.2)
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
sum(S[,])
sum(S[1,])/length(S[1,])
sum(S[1,])
S[1,]
S
View(S)
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
sum(S[1,])
sum(S[1,])/length(S[1,])
for (i in 1:length(S)) {
}
for (i in 1:length(S)) {
print(sum(S[i,])/length(S[i,]))
}
for (i in 1:length(S)) {
print(sum(S[i,])/length(S[i,]))
}
for (i in 1:length(S[,1])) {
print(sum(S[i,])/length(S[i,]))
}
for (i in 1:length(S[,1])) {
print(sum(S[i,])/length(S[i,]))
}
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
for (i in 1:length(S[,1])) {
print(sum(S[i,])/length(S[i,]))
}
source("~/EstudiosProfesionales/FIME/Doctorado/Paper_BG/Instances/Instances.R")
for (i in 1:length(S[,1])) {
print(sum(S[i,])/length(S[i,]))
}
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
setwd("C:/Users/beatr/Documents/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos1_Graficas.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos_Graficas_Matheuristica.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos_Graficas_Matheuristica.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos_Graficas_Matheuristica.R")
source("~/EstudiosProfesionales/FIME/Doctorado/TesisDoctoral/Codes/Tesis/ModeloBase_PartialCoverage/Obj_Zs/ResultadosExperimentos_Graficas_Matheuristica.R")
